/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export declare namespace Multicall {
  export type CallStruct = {
    target: PromiseOrValue<string>;
    callData: PromiseOrValue<BytesLike>;
  };

  export type CallStructOutput = [string, string] & {
    target: string;
    callData: string;
  };

  export type Call3Struct = {
    target: PromiseOrValue<string>;
    allowFailure: PromiseOrValue<boolean>;
    callData: PromiseOrValue<BytesLike>;
  };

  export type Call3StructOutput = [string, boolean, string] & {
    target: string;
    allowFailure: boolean;
    callData: string;
  };

  export type ResultStruct = {
    success: PromiseOrValue<boolean>;
    returnData: PromiseOrValue<BytesLike>;
  };

  export type ResultStructOutput = [boolean, string] & {
    success: boolean;
    returnData: string;
  };

  export type Call3ValueStruct = {
    target: PromiseOrValue<string>;
    allowFailure: PromiseOrValue<boolean>;
    value: PromiseOrValue<BigNumberish>;
    callData: PromiseOrValue<BytesLike>;
  };

  export type Call3ValueStructOutput = [string, boolean, BigNumber, string] & {
    target: string;
    allowFailure: boolean;
    value: BigNumber;
    callData: string;
  };
}

export interface MulticallInterface extends utils.Interface {
  functions: {
    "aggregate((address,bytes)[])": FunctionFragment;
    "aggregate3((address,bool,bytes)[])": FunctionFragment;
    "aggregate3Value((address,bool,uint256,bytes)[])": FunctionFragment;
    "blockAndAggregate((address,bytes)[])": FunctionFragment;
    "getBalance(address)": FunctionFragment;
    "getBasefee()": FunctionFragment;
    "getBlockHash(uint256)": FunctionFragment;
    "getBlockNumber()": FunctionFragment;
    "getChainId()": FunctionFragment;
    "getCurrentBlockCoinbase()": FunctionFragment;
    "getCurrentBlockDifficulty()": FunctionFragment;
    "getCurrentBlockGasLimit()": FunctionFragment;
    "getCurrentBlockTimestamp()": FunctionFragment;
    "getEthBalance(address)": FunctionFragment;
    "getLastBlockHash()": FunctionFragment;
    "tryAggregate(bool,(address,bytes)[])": FunctionFragment;
    "tryBlockAndAggregate(bool,(address,bytes)[])": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "aggregate"
      | "aggregate3"
      | "aggregate3Value"
      | "blockAndAggregate"
      | "getBalance"
      | "getBasefee"
      | "getBlockHash"
      | "getBlockNumber"
      | "getChainId"
      | "getCurrentBlockCoinbase"
      | "getCurrentBlockDifficulty"
      | "getCurrentBlockGasLimit"
      | "getCurrentBlockTimestamp"
      | "getEthBalance"
      | "getLastBlockHash"
      | "tryAggregate"
      | "tryBlockAndAggregate"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "aggregate",
    values: [Multicall.CallStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "aggregate3",
    values: [Multicall.Call3Struct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "aggregate3Value",
    values: [Multicall.Call3ValueStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "blockAndAggregate",
    values: [Multicall.CallStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getBalance",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getBasefee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getBlockHash",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getBlockNumber",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getChainId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentBlockCoinbase",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentBlockDifficulty",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentBlockGasLimit",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentBlockTimestamp",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getEthBalance",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getLastBlockHash",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "tryAggregate",
    values: [PromiseOrValue<boolean>, Multicall.CallStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "tryBlockAndAggregate",
    values: [PromiseOrValue<boolean>, Multicall.CallStruct[]]
  ): string;

  decodeFunctionResult(functionFragment: "aggregate", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "aggregate3", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "aggregate3Value",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "blockAndAggregate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getBalance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getBasefee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getBlockHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBlockNumber",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getChainId", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentBlockCoinbase",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentBlockDifficulty",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentBlockGasLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentBlockTimestamp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getEthBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLastBlockHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tryAggregate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tryBlockAndAggregate",
    data: BytesLike
  ): Result;

  events: {};
}

export interface Multicall extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: MulticallInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    aggregate(
      calls: Multicall.CallStruct[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    aggregate3(
      calls: Multicall.Call3Struct[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    aggregate3Value(
      calls: Multicall.Call3ValueStruct[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    blockAndAggregate(
      calls: Multicall.CallStruct[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getBalance(
      addr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { balance: BigNumber }>;

    /**
     * Gets the base fee of the given blockCan revert if the BASEFEE opcode is not implemented by the given chain
     */
    getBasefee(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { basefee: BigNumber }>;

    /**
     * Returns the block hash for the given block number
     * @param blockNumber The block number
     */
    getBlockHash(
      blockNumber: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string] & { blockHash: string }>;

    /**
     * Returns the block number
     */
    getBlockNumber(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { blockNumber: BigNumber }>;

    /**
     * Returns the chain id
     */
    getChainId(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { chainid: BigNumber }>;

    /**
     * Returns the block coinbase
     */
    getCurrentBlockCoinbase(
      overrides?: CallOverrides
    ): Promise<[string] & { coinbase: string }>;

    /**
     * Returns the block difficulty
     */
    getCurrentBlockDifficulty(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { difficulty: BigNumber }>;

    /**
     * Returns the block gas limit
     */
    getCurrentBlockGasLimit(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { gaslimit: BigNumber }>;

    /**
     * Returns the block timestamp
     */
    getCurrentBlockTimestamp(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { timestamp: BigNumber }>;

    /**
     * Returns the (FIL) balance of a given address
     */
    getEthBalance(
      addr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { balance: BigNumber }>;

    /**
     * Returns the block hash of the last block
     */
    getLastBlockHash(
      overrides?: CallOverrides
    ): Promise<[string] & { blockHash: string }>;

    tryAggregate(
      requireSuccess: PromiseOrValue<boolean>,
      calls: Multicall.CallStruct[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    tryBlockAndAggregate(
      requireSuccess: PromiseOrValue<boolean>,
      calls: Multicall.CallStruct[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  aggregate(
    calls: Multicall.CallStruct[],
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  aggregate3(
    calls: Multicall.Call3Struct[],
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  aggregate3Value(
    calls: Multicall.Call3ValueStruct[],
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  blockAndAggregate(
    calls: Multicall.CallStruct[],
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getBalance(
    addr: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  /**
   * Gets the base fee of the given blockCan revert if the BASEFEE opcode is not implemented by the given chain
   */
  getBasefee(overrides?: CallOverrides): Promise<BigNumber>;

  /**
   * Returns the block hash for the given block number
   * @param blockNumber The block number
   */
  getBlockHash(
    blockNumber: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  /**
   * Returns the block number
   */
  getBlockNumber(overrides?: CallOverrides): Promise<BigNumber>;

  /**
   * Returns the chain id
   */
  getChainId(overrides?: CallOverrides): Promise<BigNumber>;

  /**
   * Returns the block coinbase
   */
  getCurrentBlockCoinbase(overrides?: CallOverrides): Promise<string>;

  /**
   * Returns the block difficulty
   */
  getCurrentBlockDifficulty(overrides?: CallOverrides): Promise<BigNumber>;

  /**
   * Returns the block gas limit
   */
  getCurrentBlockGasLimit(overrides?: CallOverrides): Promise<BigNumber>;

  /**
   * Returns the block timestamp
   */
  getCurrentBlockTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

  /**
   * Returns the (FIL) balance of a given address
   */
  getEthBalance(
    addr: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  /**
   * Returns the block hash of the last block
   */
  getLastBlockHash(overrides?: CallOverrides): Promise<string>;

  tryAggregate(
    requireSuccess: PromiseOrValue<boolean>,
    calls: Multicall.CallStruct[],
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  tryBlockAndAggregate(
    requireSuccess: PromiseOrValue<boolean>,
    calls: Multicall.CallStruct[],
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    aggregate(
      calls: Multicall.CallStruct[],
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string[]] & { blockNumber: BigNumber; returnData: string[] }
    >;

    aggregate3(
      calls: Multicall.Call3Struct[],
      overrides?: CallOverrides
    ): Promise<Multicall.ResultStructOutput[]>;

    aggregate3Value(
      calls: Multicall.Call3ValueStruct[],
      overrides?: CallOverrides
    ): Promise<Multicall.ResultStructOutput[]>;

    blockAndAggregate(
      calls: Multicall.CallStruct[],
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string, Multicall.ResultStructOutput[]] & {
        blockNumber: BigNumber;
        blockHash: string;
        returnData: Multicall.ResultStructOutput[];
      }
    >;

    getBalance(
      addr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Gets the base fee of the given blockCan revert if the BASEFEE opcode is not implemented by the given chain
     */
    getBasefee(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Returns the block hash for the given block number
     * @param blockNumber The block number
     */
    getBlockHash(
      blockNumber: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    /**
     * Returns the block number
     */
    getBlockNumber(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Returns the chain id
     */
    getChainId(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Returns the block coinbase
     */
    getCurrentBlockCoinbase(overrides?: CallOverrides): Promise<string>;

    /**
     * Returns the block difficulty
     */
    getCurrentBlockDifficulty(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Returns the block gas limit
     */
    getCurrentBlockGasLimit(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Returns the block timestamp
     */
    getCurrentBlockTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Returns the (FIL) balance of a given address
     */
    getEthBalance(
      addr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Returns the block hash of the last block
     */
    getLastBlockHash(overrides?: CallOverrides): Promise<string>;

    tryAggregate(
      requireSuccess: PromiseOrValue<boolean>,
      calls: Multicall.CallStruct[],
      overrides?: CallOverrides
    ): Promise<Multicall.ResultStructOutput[]>;

    tryBlockAndAggregate(
      requireSuccess: PromiseOrValue<boolean>,
      calls: Multicall.CallStruct[],
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string, Multicall.ResultStructOutput[]] & {
        blockNumber: BigNumber;
        blockHash: string;
        returnData: Multicall.ResultStructOutput[];
      }
    >;
  };

  filters: {};

  estimateGas: {
    aggregate(
      calls: Multicall.CallStruct[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    aggregate3(
      calls: Multicall.Call3Struct[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    aggregate3Value(
      calls: Multicall.Call3ValueStruct[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    blockAndAggregate(
      calls: Multicall.CallStruct[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getBalance(
      addr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Gets the base fee of the given blockCan revert if the BASEFEE opcode is not implemented by the given chain
     */
    getBasefee(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Returns the block hash for the given block number
     * @param blockNumber The block number
     */
    getBlockHash(
      blockNumber: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Returns the block number
     */
    getBlockNumber(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Returns the chain id
     */
    getChainId(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Returns the block coinbase
     */
    getCurrentBlockCoinbase(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Returns the block difficulty
     */
    getCurrentBlockDifficulty(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Returns the block gas limit
     */
    getCurrentBlockGasLimit(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Returns the block timestamp
     */
    getCurrentBlockTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Returns the (FIL) balance of a given address
     */
    getEthBalance(
      addr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Returns the block hash of the last block
     */
    getLastBlockHash(overrides?: CallOverrides): Promise<BigNumber>;

    tryAggregate(
      requireSuccess: PromiseOrValue<boolean>,
      calls: Multicall.CallStruct[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    tryBlockAndAggregate(
      requireSuccess: PromiseOrValue<boolean>,
      calls: Multicall.CallStruct[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    aggregate(
      calls: Multicall.CallStruct[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    aggregate3(
      calls: Multicall.Call3Struct[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    aggregate3Value(
      calls: Multicall.Call3ValueStruct[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    blockAndAggregate(
      calls: Multicall.CallStruct[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getBalance(
      addr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Gets the base fee of the given blockCan revert if the BASEFEE opcode is not implemented by the given chain
     */
    getBasefee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Returns the block hash for the given block number
     * @param blockNumber The block number
     */
    getBlockHash(
      blockNumber: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Returns the block number
     */
    getBlockNumber(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Returns the chain id
     */
    getChainId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Returns the block coinbase
     */
    getCurrentBlockCoinbase(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Returns the block difficulty
     */
    getCurrentBlockDifficulty(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Returns the block gas limit
     */
    getCurrentBlockGasLimit(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Returns the block timestamp
     */
    getCurrentBlockTimestamp(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Returns the (FIL) balance of a given address
     */
    getEthBalance(
      addr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Returns the block hash of the last block
     */
    getLastBlockHash(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tryAggregate(
      requireSuccess: PromiseOrValue<boolean>,
      calls: Multicall.CallStruct[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    tryBlockAndAggregate(
      requireSuccess: PromiseOrValue<boolean>,
      calls: Multicall.CallStruct[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
